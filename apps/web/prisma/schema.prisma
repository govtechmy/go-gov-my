generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
  engineType      = "binary"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
  relationMode = "foreignKeys"
  extensions   = [pgcrypto(schema: "public")]
}

model Agency {
  code    String  @id
  logo    String?
  names   Json
  members User[]
}

model User {
  id            String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String?
  email         String         @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime       @default(now()) @db.Timestamptz(6)
  subscribed    Boolean        @default(true)
  agencyCode    String         @default("govtech")
  role          UserRole       @default(staff)
  accounts      Account[]
  links         Link[]
  linkHistory   LinkHistory[]
  projects      ProjectUsers[]
  sessions      Session[]
  tokens        Token[]
  agency        Agency         @relation(fields: [agencyCode], references: [code])
  file          File[]

  @@index([agencyCode])
}

model Account {
  id                       String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId                   String  @db.Uuid
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @map("session_token")
  userId       String   @db.Uuid
  expires      DateTime @default(now()) @db.Timestamptz(6)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@id([identifier, token])
}

model Token {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String
  hashedKey  String    @unique
  partialKey String
  expires    DateTime?
  lastUsed   DateTime?
  createdAt  DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime  @updatedAt
  userId     String    @db.Uuid
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Project {
  id                String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name              String
  slug              String           @unique
  logo              String?
  plan              String           @default("business")
  billingCycleStart Int
  usage             Int              @default(0)
  usageLimit        Int              @default(1000)
  aiUsage           Int              @default(0)
  aiLimit           Int              @default(10)
  linksUsage        Int              @default(0)
  linksLimit        Int              @default(25)
  tagsLimit         Int              @default(5)
  createdAt         DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime         @updatedAt
  inviteCode        String?          @unique
  agencyCode        String           @default("govtech")
  defaultDomains    DefaultDomains[]
  links             Link[]
  invites           ProjectInvite[]
  users             ProjectUsers[]
  sentEmails        SentEmail[]
  tags              Tag[]
  file              File[]
}

model ProjectInvite {
  email     String
  expires   DateTime?
  projectId String    @db.Uuid
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  project   Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@id([email, projectId])
  @@index([projectId])
}

model DefaultDomains {
  id          String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  dubsh       Boolean @default(true)
  chatgpt     Boolean @default(true)
  sptifi      Boolean @default(true)
  gitnew      Boolean @default(true)
  amznid      Boolean @default(true)
  loooooooong Boolean @default(false)
  projectId   String  @db.Uuid
  project     Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
}

model ProjectUsers {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  role      Role     @default(member)
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt
  userId    String   @db.Uuid
  projectId String   @db.Uuid
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
  @@index([projectId])
}

model SentEmail {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type      String
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  projectId String?  @db.Uuid
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
}

model Link {
  id                String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  domain            String
  key               String
  url               String
  archived          Boolean       @default(false)
  expiresAt         DateTime?
  expiredUrl        String?
  externalId        String?
  trackConversion   Boolean       @default(false)
  proxy             Boolean       @default(false)
  title             String?
  description       String?       @db.VarChar(280)
  image             String?
  utm_source        String?
  utm_medium        String?
  utm_campaign      String?
  utm_term          String?
  utm_content       String?
  ios               String?
  android           String?
  geo               Json?         @db.Json
  userId            String?       @db.Uuid
  projectId         String        @db.Uuid
  publicStats       Boolean       @default(false)
  clicks            Int           @default(0)
  lastClicked       DateTime?
  createdAt         DateTime      @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime      @updatedAt
  comments          String?
  banned            Boolean       @default(false)
  passwordEnabledAt DateTime?
  project           Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user              User?         @relation(fields: [userId], references: [id])
  history           LinkHistory[]
  tags              LinkTag[]

  @@unique([domain, key])
  @@unique([projectId, externalId])
  @@index([projectId])
  @@index([domain])
  @@index([trackConversion])
  @@index([proxy])
  @@index([createdAt(sort: Desc)])
  @@index([clicks(sort: Desc)])
  @@index([lastClicked])
  @@index([userId])
}

model WebhookOutbox {
  id               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  host             String
  payload          Json
  createdAt        DateTime @default(now()) @db.Timestamptz(6)
  action           String
  headers          Json
  partitionKey     String
  encryptedSecrets String?
}

model LinkHistory {
  id                String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type              LinkHistoryType
  committedByUserId String?         @db.Uuid
  linkId            String          @db.Uuid
  timestamp         DateTime        @db.Timestamptz(6)
  domain            String
  key               String
  url               String
  archived          Boolean
  expiresAt         DateTime?
  expiredUrl        String?
  externalId        String?
  trackConversion   Boolean
  publicStats       Boolean
  proxy             Boolean
  title             String?
  description       String?         @db.VarChar(280)
  image             String?
  ios               String?
  android           String?
  geo               Json?           @db.Json
  committedByUser   User?           @relation(fields: [committedByUserId], references: [id])
  link              Link            @relation(fields: [linkId], references: [id], onDelete: Cascade)

  @@index([linkId])
}

model Tag {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  color     String    @default("blue")
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt DateTime  @updatedAt
  projectId String    @db.Uuid
  links     LinkTag[]
  project   Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([name, projectId])
  @@index([projectId])
}

model LinkTag {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt
  linkId    String   @db.Uuid
  tagId     String   @db.Uuid
  link      Link     @relation(fields: [linkId], references: [id], onDelete: Cascade)
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([linkId, tagId])
  @@index([linkId])
  @@index([tagId])
}

model Analytics {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  linkId         String
  from           DateTime
  to             DateTime
  aggregatedDate DateTime @db.Date
  metadata       Json     @db.Json
  createdAt      DateTime @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime @updatedAt
}

model IdempotentResource {
  idempotencyKey String   @id
  hashedPayload  String
  createdAt      DateTime @default(now()) @db.Timestamptz(6)
}

model ReportedLink {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  url       String
  ipAddress String
  userAgent String
  createdAt DateTime @default(now()) @db.Timestamptz(6)
}

model File {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  projectId String   @db.Uuid
  userId    String   @db.Uuid
  fileUrl   String
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt
  createdBy String
  status    String  @db.VarChar(20)

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

enum UserRole {
  staff
  agency_admin
  super_admin
}

enum Role {
  owner
  member
}

enum LinkHistoryType {
  create
  update
}
