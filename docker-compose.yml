version: '3.8'

services:
  ######################
  # Required Container #
  ######################
  next-landing-page:
    build:
      context: ./apps/redirect-pages/next-landing-page
      dockerfile: Dockerfile.nginx
    ports:
      - "8080:80"
    volumes:
      - ./apps/redirect-pages/next-landing-page/nginx.conf:/etc/nginx/conf.d/default.conf
    environment:
      - NODE_ENV=production
    #command: sh -c "npm run generate && nginx -g 'daemon off;'"
    networks:
      - my-network

  ps-postgres:
    image: postgres:13
    container_name: ps-postgres
    restart: always
    env_file:
      - .env
    environment:
      - POSTGRES_DB=${POSTGRESDB}
      - POSTGRES_USER=${POSTGRESUSER}
      - POSTGRES_PASSWORD=${POSTGRESPASSWORD}
    command:
      - -c
      - wal_level=logical
    ports:
      - 5432:5432
    volumes:
      - ps-postgres:/var/lib/postgresql/data
    networks:
      - my-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  redis:
    image: redis:7.2
    container_name: redis
    restart: always
    ports:
      - 6379:6379
    networks:
      - my-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.13.2
    container_name: elasticsearch
    restart: always
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
      - 9200:9200
    networks:
      - my-network
    volumes:
      - esdata:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://elasticsearch:9200"]
      interval: 3s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    mem_limit: 1g

  init-elasticsearch:
    image: curlimages/curl:8.8.0
    container_name: init-elasticsearch
    depends_on:
      elasticsearch:
        condition: service_healthy
    volumes:
      - ./init-elasticsearch.sh:/home/curl_user/init-elasticsearch.sh
    entrypoint: /home/curl_user/init-elasticsearch.sh
    networks:
      - my-network

  filebeat:
    image: docker.elastic.co/beats/filebeat:7.13.2
    restart: always
    volumes:
      - filebeatdata:/usr/share/filebeat/data:rw
      - ./filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - ./apps/redirect-server/logs:/usr/share/filebeat/logs:ro
    networks:
      - my-network
    depends_on:
      init-elasticsearch:
        condition: service_completed_successfully

  logstash:
    image: docker.elastic.co/logstash/logstash:7.13.2
    env_file:
      - .env
    ports:
      - "5044:5044"
    volumes:
      - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
      - ./logstash.yml:/usr/share/logstash/config/logstash.yml:ro
    networks:
      - my-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.1
    hostname: zookeeper
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 2181:2181
    networks:
      - my-network

  broker:
    image: confluentinc/cp-enterprise-kafka:7.6.1
    hostname: broker
    container_name: broker
    depends_on: [zookeeper]
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
      CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: zookeeper:2181
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: "true"
      CONFLUENT_SUPPORT_CUSTOMER_ID: "anonymous"
    ports:
      - 9092:9092
    networks:
      - my-network

  debezium:
    image: debezium/connect:2.6
    container_name: debezium
    environment:
      BOOTSTRAP_SERVERS: broker:29092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: connect_configs
      OFFSET_STORAGE_TOPIC: connect_offsets
      STATUS_STORAGE_TOPIC: connect_statuses
      KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
    depends_on: [broker, ps-postgres]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://debezium:8083/connectors"]
      interval: 3s
      timeout: 5s
      retries: 5
    ports:
      - 8083:8083
    networks:
      - my-network

  init-debezium-connector:
    image: curlimages/curl:8.8.0
    container_name: init-debezium-connector
    depends_on:
      debezium:
        condition: service_healthy
    volumes:
      - ./init-debezium-connector.sh:/home/curl_user/init-debezium-connector.sh
    env_file:
      - .env
    environment:
      - POSTGRES_DB=${POSTGRESDB}
      - POSTGRES_USER=${POSTGRESUSER}
      - POSTGRES_PASSWORD=${POSTGRESPASSWORD}
    entrypoint: /home/curl_user/init-debezium-connector.sh
    networks:
      - my-network

  uptime-kuma:
    image: louislam/uptime-kuma:1
    restart: always
    volumes:
      - uptime-kuma:/app/data
    ports:
      - 3001:3001
    networks:
      - my-network

  ##########################
  # Optional Container     #
  # Mainly for Development #
  ##########################

  # kafdrop:
  #   image: obsidiandynamics/kafdrop
  #   container_name: kafdrop
  #   restart: always
  #   ports:
  #     - 9000:9000
  #   environment:
  #     KAFKA_BROKER_CONNECT: "broker:29092"
  #   depends_on:
  #     - broker
  #   networks:
  #     - my-network

  # debezium-ui:
  #   image: quay.io/debezium/debezium-ui:latest
  #   container_name: debezium-ui
  #   platform: linux/amd64
  #   restart: always
  #   ports:
  #     - "8080:8080"
  #   environment:
  #     - KAFKA_CONNECT_URIS=http://debezium:8083
  #   depends_on:
  #     - debezium
  #   networks:
  #     - my-network

  # Comment this out during development
  # go-api:
  #   container_name: go-api
  #   build:
  #     context: ./apps/redirect-server
  #     dockerfile: docker/Dockerfile.api
  #   ports:
  #     - "3002:3002"
  #   env_file:
  #     - .env
  #   environment:
  #     - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
  #   command:
  #     - "/api"
  #     - "--elastic-url=http://elasticsearch:9200"
  #   volumes:
  #     - .:/app
  #   depends_on:
  #     - elasticsearch
  #   networks:
  #     - my-network

  # Comment this out during development
  # go-redirectd:
  #   container_name: go-redirectd
  #   build:
  #     context: ./apps/redirect-server
  #     dockerfile: docker/Dockerfile.redirectd
  #   ports:
  #     - "3000:3000"
  #   env_file:
  #     - .env
  #   environment:
  #     - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
  #   command:
  #     - "/redirectd"
  #     - "--elastic-url=http://elasticsearch:9200"
  #   volumes:
  #     - .:/app
  #   depends_on:
  #     - elasticsearch

networks:
  my-network:

volumes:
  ps-postgres:
  esdata:
  filebeatdata:
  status-page:
  uptime-kuma:
  node_modules:
