services:
  ######################
  # Required Container #
  ######################

  ######################
  # Port List (sorted) #
  ######################
  # zookeeper:                2181
  # analytics-aggregator:     3003
  # cron-app:                 3003
  # grafana-app:              3004
  # docs-app:                 3334
  # prometheus-app:           3005
  # jaeger-app:               3006
  # filebeat:                 5044
  # logstash:                 5044
  # ps-postgres:              5432
  # redis:                    6379
  # debezium:                 8083
  # init-debezium-connector:  8083
  # broker:                   9092
  # elasticsearch:            9200
  # init-elasticsearch:       9200
  ######################

  ## Database App Port: 5432 ##
  ps-postgres:
    image: postgres:13
    container_name: ps-postgres
    restart: always
    env_file:
      - .env
    environment:
      - POSTGRES_DB=${POSTGRESDB}
      - POSTGRES_USER=${POSTGRESUSER}
      - POSTGRES_PASSWORD=${POSTGRESPASSWORD}
    command:
      - -c
      - wal_level=logical
    ports:
      - 5432:5432
    volumes:
      - ps-postgres:/var/lib/postgresql/data
    networks:
      - my-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  ## Cache App Port: 6379 ##
  redis:
    image: redis:7.2
    container_name: redis
    restart: always
    ports:
      - 6379:6379
    networks:
      - my-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  ## Link Indexing App Port: 9200 ##
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.13.2
    container_name: elasticsearch
    restart: always
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
      - 9200:9200
    networks:
      - my-network
    volumes:
      - esdata:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://elasticsearch:9200"]
      interval: 3s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    mem_limit: 1g

  ## Filebeat Log Tail Port: 5044 ##
  filebeat:
    image: docker.elastic.co/beats/filebeat:7.13.2
    restart: always
    volumes:
      - filebeatdata:/usr/share/filebeat/data:rw
      - ./filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - ./apps/redirect-server/logs:/usr/share/filebeat/logs:ro
    networks:
      - my-network
    depends_on:
      init-elasticsearch:
        condition: service_completed_successfully

  ## Go Log Collector Port: 5044 ##
  logstash:
    image: docker.elastic.co/logstash/logstash:7.13.2
    env_file:
      - .env
    ports:
      - "5044:5044"
    volumes:
      - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
      - ./logstash.yml:/usr/share/logstash/config/logstash.yml:ro
    networks:
      - my-network

  ## Data Propagation Port: 2181 ##
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.1
    hostname: zookeeper
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 2181:2181
    networks:
      - my-network

  ## Kafka Broker Port: 9092 ##
  broker:
    image: confluentinc/cp-enterprise-kafka:7.6.1
    hostname: broker
    container_name: broker
    depends_on: [zookeeper]
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
      CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: zookeeper:2181
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: "true"
      CONFLUENT_SUPPORT_CUSTOMER_ID: "anonymous"
    ports:
      - 9092:9092
    networks:
      - my-network

  ## Event Trigger Port: 8083 ##
  debezium:
    image: debezium/connect:2.6
    container_name: debezium
    environment:
      BOOTSTRAP_SERVERS: broker:29092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: connect_configs
      OFFSET_STORAGE_TOPIC: connect_offsets
      STATUS_STORAGE_TOPIC: connect_statuses
      KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
    depends_on: [broker, ps-postgres]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://debezium:8083/connectors"]
      interval: 3s
      timeout: 5s
      retries: 5
    ports:
      - 8083:8083
    networks:
      - my-network

  ## Debezium Connector Init Port: 8083 ##
  init-debezium-connector:
    image: curlimages/curl:8.8.0
    container_name: init-debezium-connector
    depends_on:
      debezium:
        condition: service_healthy
    volumes:
      - ./shell-script/init-debezium-connector.sh:/home/curl_user/init-debezium-connector.sh
    env_file:
      - .env
    environment:
      - POSTGRES_DB=${POSTGRESDB}
      - POSTGRES_USER=${POSTGRESUSER}
      - POSTGRES_PASSWORD=${POSTGRESPASSWORD}
    entrypoint: /home/curl_user/init-debezium-connector.sh
    networks:
      - my-network

  ## Elasticsearch Init Port: 9200 ##
  init-elasticsearch:
    image: curlimages/curl:8.8.0
    container_name: init-elasticsearch
    depends_on:
      elasticsearch:
        condition: service_healthy
    volumes:
      - ./shell-script/init-elasticsearch.sh:/home/curl_user/init-elasticsearch.sh
    entrypoint: /home/curl_user/init-elasticsearch.sh
    networks:
      - my-network

  ## Grafana Metrics Visualization Port: 3004 ##
  grafana-app:
    container_name: grafana-app
    build:
      context: .
      dockerfile: docker/Dockerfile.grafana
    ports:
      - 3004:3004
    volumes:
      - grafanadata:/var/lib/grafana
    networks:
      - my-network

  ## Metrics Reporter Port: 3005 ##
  prometheus-app:
    container_name: prometheus-app
    build:
      context: .
      dockerfile: docker/Dockerfile.prometheus
    ports:
      - 3005:3005
    volumes:
      - prometheusdata:/prometheus
    networks:
      - my-network
  
  ## Traces Reporter Port: 3006 ##
  jaeger-app:
    container_name: jaeger-app
    build:
      context: .
      dockerfile: docker/Dockerfile.jaeger
    volumes:
      - jaegerdata:/data
    ports:
      - 3006:3006
    networks:
      - my-network


  ##########################
  # Optional Container     #
  # Mainly for Development #
  # UI Toolkit             #
  ##########################

  ## Kafka UI Tools Port: 9000 ##
  # kafdrop:
  #   image: obsidiandynamics/kafdrop
  #   container_name: kafdrop
  #   restart: always
  #   ports:
  #     - 9000:9000
  #   environment:
  #     KAFKA_BROKER_CONNECT: "broker:29092"
  #   depends_on:
  #     - broker
  #   networks:
  #     - my-network


  ## Debezium UI Tools Port: 8080 ##
  # debezium-ui:
  #   image: quay.io/debezium/debezium-ui:latest
  #   container_name: debezium-ui
  #   platform: linux/amd64
  #   restart: always
  #   ports:
  #     - "8080:8080"
  #   environment:
  #     - KAFKA_CONNECT_URIS=http://debezium:8083
  #   depends_on:
  #     - debezium
  #   networks:
  #     - my-network


  ## Uptime Kuma Port: 3001 ##
  # uptime-kuma:
  #   image: louislam/uptime-kuma:1
  #   restart: always
  #   volumes:
  #     - uptime-kuma:/app/data
  #   ports:
  #     - 3001:3001
  #   networks:
  #     - my-network


  ##########################
  # Optional Container     #
  # Mainly for Development #
  # Optional Application   #
  ##########################

  ## Go API Port: 3002 ##
  # Comment this out during development
  # go-api:
  #   container_name: go-api
  #   build:
  #     context: .
  #     dockerfile: docker/Dockerfile.api
  #   ports:
  #     - "3002:3002"
  #   env_file:
  #     - ./apps/redirect-server/.env
  #   environment:
  #     - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
  #   command:
  #     - "/api"
  #     - "--elastic-url=http://elasticsearch:9200"
  #   volumes:
  #     - .:/app
  #   depends_on:
  #     - elasticsearch
  #   networks:
  #     - my-network

  ## Redirectd Port: 3000 ##
  # Comment this out during development
  # go-redirectd:
  #   container_name: go-redirectd
  #   build:
  #     context: .
  #     dockerfile: docker/Dockerfile.redirectd
  #   ports:
  #     - "3000:3000"
  #   env_file:
  #    - ./apps/redirect-server/.env
  #   environment:
  #     - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
  #   command:
  #     - "/redirectd"
  #     - "--elastic-url=http://elasticsearch:9200"
  #   volumes:
  #     - .:/app
  #   depends_on:
  #     - elasticsearch

  ## Analytics Aggregator Port: 3003 ##
  analytics-aggregator:
    container_name: analytics-aggregator
    build:
      context: .
      dockerfile: docker/Dockerfile.analytics-aggregator
    ports:
      - "3003:3003"
    env_file:
      - ./apps/redirect-server/.env
    command:
      - "/analytics-aggregator"
    volumes:
      - ./apps/redirect-server:/app
    depends_on:
      - broker
    networks:
      - my-network

  ## Landing Page stats CRON ##
  cron-app:
    container_name: cron-app
    build:
      context: .
      dockerfile: docker/Dockerfile.cron
    env_file:
      - ./apps/cron/.env
    environment:
      - API_KEY=61c13aa707864277adea80575323b84b
      - WEB_BASE=https://app.pautan.org
    # volumes:
    #   - ./apps/cron:/app
    networks:
      - my-network

  ## Docs Port: 3334 ##
  docs-app:
    container_name: docs-app
    build:
      context: .
      dockerfile: docker/Dockerfile.docs
    ports:
      - "3334:3334"
    env_file:
      - .env
    volumes:
      - ./apps/docs:/app
    networks:
      - my-network
  
  next-landing-page:
    build:
      context: .
      dockerfile: docker/Dockerfile.landing
    ports:
      - "3000:3000"
    environment:
      - LANDING_STATS_JSON_URL=https://gogov-web-staging.s3.ap-southeast-1.amazonaws.com/public/stats.json

networks:
  my-network:

volumes:
## Required Volumes ##
  ps-postgres:
  filebeatdata:
  grafanadata:
  prometheusdata:
  jaegerdata:
  esdata:
## Optional Volumes ##
  # uptime-kuma: