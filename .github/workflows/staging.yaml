name: Deploy to Staging
env:
  IMAGE: gogov-redirectd
on:
  push:
    branches:
      - staging
      - feat/deploy1
  pull_request:
    branches:
      - staging
jobs:
  # build:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Check out code
  #       uses: actions/checkout@v4
  #     - name: Setup pnpm
  #       uses: pnpm/action-setup@v3
  #       with:
  #         version: 8
  #     - name: Install dependencies
  #       run: pnpm install
  #     - name: Check prettier format
  #       run: pnpm run prettier-check

    #   - name: Update OpenAPI Swagger File
    #     run: pnpm run generate-openapi

    #   - name: Run Unit Test
    #     run: pnpm run test
  deploy:
    # needs: [build]
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::767397910274:role/github-oidc-provider-aws
          aws-region: ap-southeast-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.IMAGE }}
          tags: |
            type=sha
      - name: Build and push Docker images
        uses: docker/build-push-action@v5
        with:
          context: apps/redirect-server
          file: apps/redirect-server/docker/Dockerfile.redirectd
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      - name: Log out of Amazon ECR
        run: docker logout ${{ steps.login-ecr.outputs.registry }}
      - name: Deploy with Spinnaker
        run: |
          curl --request POST \
              --url https://spin-gate.govtechmy.dev/webhooks/webhook/github \
              --header 'Content-Type: application/json' \
              --data '{
                "secret": "${{ secrets.SPINNAKER_SECRET }}",
                "artifacts": [
                  {
                    "type": "docker/image",
                    "reference": "${{ steps.meta.outputs.tags }}",
                    "name": "${{ steps.login-ecr.outputs.registry }}/${{ env.IMAGE }}",
                    "version": "${{ steps.meta.outputs.version }}"
                  }
                ]
              }'
